Iteradores e Iterables
¿Qué es un iterador?
Un iterador es un objeto que permite recorrer elementos de una colección (como arrays, strings, mapas, etc.) uno por uno, sin necesidad de conocer la estructura interna de la colección. Un iterador tiene un método next() que devuelve el siguiente valor en la secuencia.

¿Qué es un iterable?
Un iterable es cualquier objeto que implementa el protocolo de iterables, es decir, que tiene una propiedad especial [Symbol.iterator]. Esto permite que sea usado en construcciones como for...of.


Uso básico de un iterador
const numeros = [10, 20, 30];
const iterador = numeros[Symbol.iterator](); // Obtén el iterador del array

console.log(iterador.next()); // { value: 10, done: false }
console.log(iterador.next()); // { value: 20, done: false }
console.log(iterador.next()); // { value: 30, done: false }
console.log(iterador.next()); // { value: undefined, done: true }


Generators
¿Qué es un generator?
Un generator es una función especial que puede pausar su ejecución y luego reanudarla, lo que hace que sea más fácil crear iteradores personalizados.

Se define usando function* (con un asterisco).
Utiliza la palabra clave yield para pausar y devolver un valor.

Ejemplo básico
function* contador() {
    yield 1;
    yield 2;
    yield 3;
}

const gen = contador();

console.log(gen.next()); // { value: 1, done: false }
console.log(gen.next()); // { value: 2, done: false }
console.log(gen.next()); // { value: 3, done: false }
console.log(gen.next()); // { value: undefined, done: true }


Ejercicio práctico
Crea un generator llamado fibonacci que genere números de la secuencia de Fibonacci de forma infinita.

Por ejemplo:
const fib = fibonacci();
console.log(fib.next().value); // 0
console.log(fib.next().value); // 1
console.log(fib.next().value); // 1
console.log(fib.next().value); // 2
console.log(fib.next().value); // 3
